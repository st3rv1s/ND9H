<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on maandag, augustus 05, 2024, 10:31 AM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "NoDisarm9h" generated by Plugin Wizard -->

<muclient>
	<plugin
	name="ND9H"
	author="Kanaye"
	id="dcd64c70f7ba056a51e11939"
	language="Lua"
	purpose="Wield weapons after disarm in Nine Hells"
	date_written="2024-08-05 10:31:11"
	requires="5.07"
	version="1.0"
	>
	
	</plugin>
	<!-- 
	Your weapon has turned to fire!  IT BURNS!
	Screaming in agony, you throw the weapon down!
	You stop wielding Axe of Aardwolf in your primary hand.
	
	Your weapon has turned to fire!  IT BURNS!
	Screaming in agony, you throw the weapon down!
	You stop wielding Test of Test in your off-hand.
	-->

	<triggers>
	<trigger 
		match="Your weapon has turned to fire!  IT BURNS!" 
		name="triggerEnableDisarm" enabled="y" group="triggerGroupQuest" omit_from_output="n" regexp="n" sequence="99" script="triggerEnableDisarm"> 
	</trigger>
	<trigger 
		match="^You stop wielding (?<weapon>.*) in your (?<wield>primary hand|off-hand)\.$" 
		name="triggerDisarmed" enabled="n" group="triggerGroupQuest" omit_from_output="n" regexp="y" sequence="99" script="triggerDisarmed"> 
	</trigger>  
	</triggers>
	
    <aliases>
         
        <!-- Alias for checking update -->
        <alias
          match="^nd9h\supdate\scheck$"
          enabled="y"
          regexp="y"
          sequence="99"
          script="update_check_alias"
        />
        
        <!-- Alias for installing update -->
        <alias
          match="^nd9h\supdate\sinstall$"
          enabled="y"
          regexp="y"
          sequence="99"
          script="update_install_alias"
        />
    
    </aliases>
	
	<!--  Get our standard constants -->
	
	<include name="constants.lua"/>
	
	<!--  Script  -->
	<script>
	<![CDATA[
	
      ----------------------- Plugin Update Code -----------------------
      -- Code taken from Durel's dinv plugin, originally via Crowley
     require("wait")
     require("async")
     json = require("json")
     
      plugin_url = "https://raw.githubusercontent.com/st3rv1s/NoDisarm9h/refs/heads/main/NoDisarm9h.xml"
      SetVariable("DownloadURL", plugin_url)
      plugin_protocol = "HTTPS"
      plugin_prefix = "[ND9H]"
      
      function update_check_alias()
          update_plugin("check")
          ColourNote("white", "", plugin_prefix .. " Checking for updated version...")
      end
      
      function update_install_alias()
          update_plugin("install")
          ColourNote("white", "", plugin_prefix .. " Checking for and installing updated version...")
      end
      
      function reload_plugin()
          local scriptPrefix = GetAlphaOption("script_prefix")
          local retval
      
          -- If the user has not already specified the script prefix for this version of mush, pick a
          -- reasonable default value
          if (scriptPrefix == "") then
              scriptPrefix = "\\\\\\"
              SetAlphaOption("script_prefix", scriptPrefix)
          end
      
          -- Tell mush to reload the plugin in one second.  We can't do it directly here because a
          -- plugin can't unload itself.  Even if it could, how could it tell mush to load it again
          -- if it weren't installed? 
          retval = Execute(scriptPrefix.."DoAfterSpecial(0.1, \"ReloadPlugin('"..GetPluginID().."')\", sendto.script)")
      end
      
      function update_plugin(mode)
          update_mode = mode
      
          wait.make(get_plugin_file)
      end
      
      function get_plugin_file()
          local urlThread = async.request(plugin_url, plugin_protocol)
      
          if not urlThread then
              note_error("Couldn't create async url request.")
              return
          end
      
          local timeout = 10
          local totTime = 0
          while (urlThread:alive() and totTime < timeout) do
              wait.time(0.1)
              totTime = totTime + 0.1
          end
      
          local remoteRet, pluginData, status, headers, fullStatus = urlThread:join()
      
          if not status then
              ColourNote("red", "", plugin_prefix .. " Couldn't download plugin file. No status code.")
              
              return
          end
      
          if (status ~= 200) then
              ColourNote("red", "", plugin_prefix .. " Plugin file request status code: " .. status .. ": " .. fullStatus)
              return
          end
          
          local currentVersion = GetPluginInfo(GetPluginID(), 19) or 0
          local currentVerStr  = string.format("%1.3f", currentVersion)
          local remoteVerStr   = string.match(pluginData, '%s%s+version="([0-9%.]+)"')
          local remoteVersion  = tonumber(remoteVerStr or "") or 0
      
          if remoteVersion == currentVersion then
              ColourNote("white", "", plugin_prefix .. " You are running the most recent version (v" .. currentVerStr .. ")")
          elseif (remoteVersion < currentVersion) then
              ColourNote("white", "", plugin_prefix .. " You have a newer version than is publicly available. (v" .. currentVerStr .. ")")
          elseif (update_mode == "check") then
              ColourNote("white", "", plugin_prefix .. " You are running v" .. currentVerStr .. ", but there's a newer version v" .. remoteVerStr)
          elseif (update_mode == "install") then
              ColourNote("white", "", plugin_prefix .. " Updating plugin from version " .. currentVerStr .. " to version " .. remoteVerStr) 
      
              local pluginFile = GetPluginInfo(GetPluginID(), 6)
              local file = io.open(pluginFile, "wb")
              file:write(pluginData)
              file:close()
              reload_plugin()
          else
              ColourNote("red", "", plugin_prefix .. " Invalid update mode: " .. update_mode)
          end
      end
      ----------------------- End Plugin Update Code -----------------------	
	
	--[[ External Resources ]]--
	dofile(GetInfo(60) .. "aardwolf_colors.lua") -- Used to support Aard Colors for the cnote() function
	require "gmcphelper"
	require 'serialize'
	
	Debug = false
	Prepend = "@D[@WKanaye@D]: @w"
	
	-- Basic print function that supports aard, xterm, and ANSI color codes [idea from Durel's Inventory script]
	function cnote(string) 
	AnsiNote(stylesToANSI(ColoursToStyles(string)))
	end 
	
	function dnote(str)
	if Debug then
		cnote("@R[DEBUG]: @w"..str.."@w")
	end
	end
	
	-- Utility function to scrub string of small words like "a", "an", "of", "the"
	function scrubString(input)
		-- Define a set of words to be removed
		local wordsToRemove = {
			["a"] = true,
			["an"] = true,
			["of"] = true,
			["the"] = true
		}
		-- Split the input string into words
		local words = {}
		for word in input:gmatch("%S+") do
			table.insert(words, word)
		end
		-- Filter out the unwanted words
		local filteredWords = {}
		for _, word in ipairs(words) do
			if not wordsToRemove[word:lower()] then
				table.insert(filteredWords, word)
			end
		end
		-- Reconstruct the string without the unwanted words
		return table.concat(filteredWords, " ")
	end
	
	-- Function to enable the re-wear trigger when disarmed in D8
	function triggerEnableDisarm( name, lines, args )
		dnote( ("%striggerEnableDisarm() was called. Turning on 'triggerDisarmed' trigger and listening for the weapon line."):format(Prepend) )
		EnableTrigger( "triggerDisarmed", true )
	end
	-- Function to determine weapon and wield position and to re-wear the weapon
    function triggerDisarmed(name, lines, args)
        dnote( ("%striggerDisarmed() was called. Processing weapon name and wield position."):format(Prepend) )
        weapon = scrubString(args.weapon)
        if args.wield == "primary hand" then
            Send( ("wield %s"):format(weapon) )
        elseif args.wield == "off-hand" then
            Send( ("second %s"):format(weapon) )
        end
        EnableTrigger("triggerDisarmed", false)
    end
	
	--[[ Functions to save and load the settings ]]--
	function SaveSettings()
		--SetVariable("SoundSettings", serialize.save_simple(SoundSettings))
	end
	function LoadSettings()
	--assert(loadstring("SoundSettings = "..GetVariable("SoundSettings"))) ()
	end
	function OnPluginInstall()
		OnPluginEnable()
	end
	function OnPluginEnable()
	--[[
	local settings = GetVariable("SoundSettings")
	if settings and settings ~= "" then
		assert(loadstring("SoundSettings = "..GetVariable("SoundSettings"))) ()
	else
		initializeSoundSettings()
	end
	if not SoundSettings.qmessage then
		SoundSettings.qmessage = "@D[@RQUEST@D]: @CIt is time to quest!!!@w"
	end
	COMMAND_SoundAdmin_Help()
	]]--
	end
	function OnHelp ()
	world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
	end
	]]>
	
	</script>

</muclient>
